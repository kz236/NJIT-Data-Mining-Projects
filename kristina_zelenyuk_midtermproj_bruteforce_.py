# -*- coding: utf-8 -*-
"""Kristina_Zelenyuk_midtermproj_Bruteforce .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uelRMhgXct6N2TwR2PObLphyw2gNASqY

import packages and files and create list of all 1-itemsets
"""

import itertools as itr
import time
import pandas as pd
from itertools import permutations
from ftfy import fix_text
# read data file
file = input('Please enter filepath to list of individual items.')
start=time.time()
items = pd.read_csv(file, encoding='cp1252', header=0)
#initialize support and confidence thresholds
minsup=float(input('Please enter minimum support threshold.'))
minconf=int(input('please enter minimum confidence threshold.'))
# generate all 1 - itemsets
def oneItemsets(items):
  oneItemList = []
  for i in items['Item Name']:
    oneItemList.append(fix_text(i))
  return oneItemList

one=oneItemsets(items)

"""generate all possible two-itemsets"""

def twoItemSets(items):
    combinations2 = list()
    for i in range(0,len(items)):
        for j in range(i+1,len(items)):
            combinations2.append([items[i],items[j]])
    return combinations2

"""generate all possible n itemsets

"""

def nItems(items, n):
   combination = []
   combination.extend(itr.combinations(items, n))
   return combination

"""retrieve and count transaction file"""

file2 = input('please enter filepath to list of transactions')
transactions = pd.read_csv(file2, encoding='cp1252')

translist=[]
for transaction in transactions['trans']:
  translist.append((fix_text(str(transaction))))

def countTrans(transactions):
  count=0
  for transaction in transactions:
    count+=1
  return count

"""calculate support of each item"""

frequentItems=[] #initialize list for all frequent items
frequentSupports=[] #initialize lsit for all frequent supports

def itemSupport(transactions, itemList):
  itemsupp=[]
  size=countTrans(transactions)
  for item in itemList:
    count=0
    for transaction in transactions:
        if str(item) in str(transaction):
          count+=1 #count each time an items appears in a transaction
    support=count/size
    itemsupp.append(support)
    if support>minsup:
      minilist=[]
      minilist.append(item)
      frequentItems.append(minilist)
      frequentSupports.append(support)

  return itemsupp

itemSupport(translist, one)

"""calculate support of each itemset and determine if it is frequent

"""

def itemSetSupport(transactions, itemSet):
    freq=[]
    size=countTrans(transactions)
    count=0
    for transaction in transactions:
        matching = True
        for item in itemSet:
            if str(item) not in str(transaction):
                matching = False
                break
        if matching:
              count +=1  #count itemset ocurrences
    support=count/size #calculate support
    if support>=minsup:
      if itemSet != []:
        freq.append(itemSet)
        frequentItems.append(itemSet)
        frequentSupports.append(support)
    return freq

def listFreqItemsets(items, transactions):
  kfrequent= True
  oneset=items
  itemsupp=itemSupport(transactions, items)
  twoset= twoItemSets(oneset)
  addlist=[] #initialize list to see number of frequent itemsets per run
  for itemset in twoset:
    itemSetSupport(transactions, itemset)
    addlist.append(itemSetSupport(transactions, itemset))
  k=3 #initialize k-itemset size counter
  while len(addlist)>0:
    kset=nItems(oneset,k)
    addlist=[]
    for itemset in kset:
      itemSetSupport(transactions, itemset)
      addlist.append(itemSetSupport(transactions, itemset))
      k+=1

listFreqItemsets(one, translist)

"""Generate association rules from frequent itemsets"""

def generateAssociationRules(freq, supp):
  counter=0
  rules=[]
  for iset in freq:
    index=freq.index(iset)
    support=supp[index]
    for iset2 in freq:
      index2=freq.index(iset2)
      if((len(iset2))<(len(iset))) and (set(iset2).issubset(iset)): #association rule building from similar sets
        support2 = supp[index2]
        confidence=(support/support2)*100
        if confidence>= minconf:
            if (str(iset2)+'-->'+str(set(iset)-set(iset2))+' '+'support:'+' '+str(support) + ' '+ 'confidence:'+ ' '+str(confidence)+'%') not in rules:
              rules.append((str(iset2)+'-->'+str(set(iset)-set(iset2))+' '+'support:'+' '+str(support) + ' '+ 'confidence:'+ ' '+str(confidence)+'%')) #check for duplicates
              counter+=1
              print()
              print(str(iset2)+'-->'+str(set(iset)-set(iset2))+' '+'support:'+' '+str(support) + ' '+ 'confidence:'+ ' '+str(confidence)+'%')
  if (counter ==0):
    print('no rules found')

generateAssociationRules(frequentItems,frequentSupports)

end=time.time()

print()
print('Brute Force Runtime')
print(end-start)